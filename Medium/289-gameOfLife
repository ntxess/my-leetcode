// 289. Game of Life
// According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton 
// devised by the British mathematician John Horton Conway in 1970."
// The board is made up of an m x n grid of cells, where each cell has an initial state: live 
// (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, 
// vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
// Any live cell with fewer than two live neighbors dies as if caused by under-population.
// Any live cell with two or three live neighbors lives on to the next generation.
// Any live cell with more than three live neighbors dies, as if by over-population.
// Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
// The next state is created by applying the above rules simultaneously to every cell in the current 
// state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>> buffer(board.size(), vector<int>(board[0].size(), 0));
        for(int i = 0; i < board.size(); i++) {
            for(int j = 0; j < board[i].size(); j++) {
                int neighbors = getNeighbors(board, i, j);
                if(board[i][j] && neighbors < 2)
                    buffer[i][j] = 0;
                else if(board[i][j] && (neighbors == 2 || neighbors == 3))
                    buffer[i][j] = board[i][j];
                else if(board[i][j] && neighbors > 3)
                    buffer[i][j] = 0;
                else if(!board[i][j] && neighbors == 3)
                    buffer[i][j] = 1;
            }
        }
        board = buffer;
    }

    int getNeighbors(vector<vector<int>>& board, int i, int j) {
        int neighbors = 0;

        // top row
        if(i-1 >= 0 && j-1 >= 0 && board[i-1][j-1])
            neighbors++;
        
        if(i-1 >= 0 && board[i-1][j])
            neighbors++;
        
        if(i-1 >= 0 && j+1 < board[i-1].size() && board[i-1][j+1])
            neighbors++;
        
        // mid row
        if(j-1 >= 0 && board[i][j-1])
            neighbors++;
        
        if(j+1 < board[i].size() && board[i][j+1])
            neighbors++;

        // bot row
        if(i+1 < board.size() && j-1 >= 0 && board[i+1][j-1])
            neighbors++;
        
        if(i+1 < board.size() && board[i+1][j])
            neighbors++;
        
        if(i+1 < board.size() && j+1 < board[i+1].size() && board[i+1][j+1])
            neighbors++;
        
        return neighbors;
    }
};