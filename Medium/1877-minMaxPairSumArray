// 1877. Minimize Maximum Pair Sum in Array
// The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.

// For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.
// Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:

// Each element of nums is in exactly one pair, and
// The maximum pair sum is minimized.
// Return the minimized maximum pair sum after optimally pairing up the elements.

class Solution {
public:
    int minPairSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int start = 0;
        int end = nums.size()-1;
        int ans = INT_MIN;
        while(start < end) {
            ans = max(ans, nums[start++] + nums[end--]);
        }
        return ans;
    }
};

// Backtracting TLE
class Solution {
private:
    vector<int> pairs;

public:
    int minPairSum(vector<int>& nums) {
        int ans = INT_MAX;
        vector<bool> visited(nums.size(), false);
        helper(nums, visited, ans, false);
        return ans;
    }

    void helper(vector<int>& nums, vector<bool>& visited, int& ans, bool pairLatch) {
        if(!pairLatch && nums.size() / 2 == pairs.size()) {
            int maxVal = INT_MIN;
            for(auto i : pairs)
                maxVal = max(maxVal, i);
            ans = min(ans, maxVal);
            return;
        }

        for(int i = 0; i < nums.size(); ++i) {
            if(visited[i])
                continue;
            
            if(pairLatch) {
                visited[i] = true;
                int temp = pairs.back();
                pairs.pop_back();
                pairs.push_back(temp + nums[i]);
                helper(nums, visited, ans, false);
                pairs.pop_back();
                pairs.push_back(temp);
                visited[i] = false;
            } else {
                visited[i] = true;
                pairs.push_back(nums[i]);
                helper(nums, visited, ans, true);
                pairs.pop_back();
                visited[i] = false;
            }
        }
    }
};