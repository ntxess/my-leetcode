// 19. Remove Nth Node From End of List
// Given the head of a linked list, remove the nth node from the end of the list and return its head.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *slow = head, *fast = head;
        for(int i = 0; i < n; i++) {
            fast = fast->next;
        }
    
        if(!fast)
            return head->next;
        
        while(fast->next) {
            slow = slow->next;
            fast = fast->next;
        }
        ListNode *temp = slow->next;
        slow->next = slow->next->next;
        delete temp;
        return head;
    }
};

// redone
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int delay = 0;
        ListNode* prev = nullptr; 
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast) {
            if(delay < n) {
                fast = fast->next;
                delay++;
            } else {
                prev = slow;
                slow = slow->next;
                fast = fast->next;
            }
        }
        
        if(slow == head) {
            head = head->next;
            return head;
        }
        prev->next = slow->next;
        
        return head;
    }
};