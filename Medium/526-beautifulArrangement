// 526. Beautiful Arrangement
// Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) 
// is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:
// perm[i] is divisible by i.
// i is divisible by perm[i].
// Given an integer n, return the number of the beautiful arrangements that you can construct.

class Solution {
public:
    int countArrangement(int n) {
        vector<bool> visited(n, false);
        int count = 0;
        helper(n, visited, count, 1);
        return count;
    }

    void helper(int n, vector<bool>& visited, int& count, int idx) {
        if(idx == n+1) {
            ++count;
            return;
        }

        for(int i = 0; i < visited.size(); ++i) {
            if(!visited[i] && (idx % (i+1) == 0 || (i+1) % idx == 0)) {
                visited[i] = true;
                helper(n, visited, count, idx+1);
                visited[i] = false;
            }
        }
    }
};
