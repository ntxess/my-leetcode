// 384. Shuffle an Array
// Given an integer array nums, design an algorithm to randomly shuffle the array. 
// All permutations of the array should be equally likely as a result of the shuffling.
// Implement the Solution class:
// Solution(int[] nums) Initializes the object with the integer array nums.
// int[] reset() Resets the array to its original configuration and returns it.
// int[] shuffle() Returns a random shuffling of the array.

class Solution {
public:
    vector<int> original;
    Solution(vector<int>& nums) 
        : original(nums){}
    
    vector<int> reset() {
        return original;
    }
    
    vector<int> shuffle() {
        vector<int> shuffle = original;
        vector<int> rVec;
        while(!shuffle.empty()) {
            int randPos = rand() % shuffle.size();
            rVec.push_back(shuffle[randPos]);
            shuffle.erase(shuffle.begin() + randPos);
        }
        
        return rVec;
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(nums);
 * vector<int> param_1 = obj->reset();
 * vector<int> param_2 = obj->shuffle();
 */