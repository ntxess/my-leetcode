// 641. Design Circular Deque
// Design your implementation of the circular double-ended queue (deque).
// Implement the MyCircularDeque class:
// MyCircularDeque(int k) Initializes the deque with a maximum size of k.
// boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.
// boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.
// boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.
// boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.
// int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.
// int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.
// boolean isEmpty() Returns true if the deque is empty, or false otherwise.
// boolean isFull() Returns true if the deque is full, or false otherwise.

class MyCircularDeque {
private:
    vector<int> deque;
    int front;
    int rear;

public:
    MyCircularDeque(int k) : front(-1), rear(-1) {
        deque = vector<int>(k);    
    }
    
    bool insertFront(int value) {
        if(isFull())
            return false;
        
        if(isEmpty())
            front = rear = 0;
        else
            front = (front + deque.size()-1) % deque.size();
        deque[front] = value;
        return true;
    }
    
    bool insertLast(int value) {
        if(isFull())
            return false;
        
        if(isEmpty())
            front = rear = 0;
        else
            rear = (rear + 1) % deque.size();
        deque[rear] = value;
        return true;
    }
    
    bool deleteFront() {
        if(isEmpty())
            return false;
        
        if(front == rear)
            front = rear = -1;
        else
            front = (front + 1) % deque.size();
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty())
            return false;
        
        if(front == rear)
            front = rear = -1;
        else
            rear = (rear + deque.size()-1) % deque.size();
        return true;
    }
    
    int getFront() {
        if(isEmpty())
            return -1;
        return deque[front];
    }
    
    int getRear() {
        if(isEmpty())
            return -1;
        return deque[rear];
    }
    
    bool isEmpty() {
        if(front == -1 && rear == -1)
            return true;
        return false;
    }
    
    bool isFull() {
        if(((rear + 1) % deque.size()) == front)
            return true;
        return false;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */