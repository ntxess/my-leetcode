// 120. Triangle
// Given a triangle array, return the minimum path sum from top to bottom.
// For each step, you may move to an adjacent number of the row below. More formally, 
// if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int size = triangle.size();
        vector<int> dp(size+1, 0);

        for(int i = size-1; i >= 0; --i) {
            for(int j = 0; j < i+1; ++j) {
                int current = triangle[i][j];
                dp[j] = min(current + dp[j], current + dp[j+1]);
            }
        }
        return dp[0];
    }
};