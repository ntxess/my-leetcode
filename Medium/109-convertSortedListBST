// 109. Convert Sorted List to Binary Search Tree
// Given the head of a singly linked list where elements are sorted in ascending order, convert it to a 
// height-balanced
// binary search tree.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<ListNode*> vlist;
        ListNode* current = head;
        while(current) {
            vlist.push_back(current);
            current = current->next;
        }

        return helper(vlist, 0, vlist.size());
    }

    TreeNode* helper(vector<ListNode*>& vlist, int start, int end) {
        if(start >= end)
            return nullptr;

        int middle = ((end - start) / 2) + start;
        TreeNode *currentNode = new TreeNode(vlist[middle]->val);
        currentNode->left = helper(vlist, start, middle);
        currentNode->right = helper(vlist, middle + 1, end);
        return currentNode;
    }
};