// 47. Permutations II
// Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans;
        helper(nums, 0, nums.size()-1, ans);
        return ans;
    }

    void helper(vector<int>& nums, int l, int r, vector<vector<int>>& ans) {
        if(l == r) {
            ans.push_back(nums);
            return;
        }

        unordered_set<int> set;
        for(int i = l; i <= r; i++) {
            if(set.find(nums[i]) != set.end()) 
                continue;
            set.insert(nums[i]);
            swap(nums[l], nums[i]);
            helper(nums, l+1, r, ans);
            swap(nums[l], nums[i]);
        }
    }
};