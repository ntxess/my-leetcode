// 146. LRU Cache
// Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

// Implement the LRUCache class:

// LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
// int get(int key) Return the value of the key if the key exists, otherwise return -1.
// void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
// The functions get and put must each run in O(1) average time complexity.

class LRUCache {
private:
    struct data {
        int value;
        list<int>::iterator agebit;
        data() : value(0) {}
    };

    unordered_map<int, data> cache;
    list<int> lifeTimes;
    int size;
    int capacity;

public:
    LRUCache(int capacity) 
        : size(0), capacity(capacity) {}
    
    int get(int key) {
        if(cache.find(key) == cache.end()) 
            return -1;
        
        lifeTimes.erase(cache[key].agebit);
        lifeTimes.push_front(key);
        cache[key].agebit = lifeTimes.begin();
        return cache[key].value;
    }
    
    void put(int key, int value) {
        if(cache.find(key) != cache.end()) {
            lifeTimes.erase(cache[key].agebit);
            lifeTimes.push_front(key);
            cache[key].agebit = lifeTimes.begin();
            cache[key].value = value;
        } else {
            if(size < capacity) {
                lifeTimes.push_front(key);
                cache[key].agebit = lifeTimes.begin();
                cache[key].value = value;
                size++;
            } else {
                lifeTimes.push_front(key);
                cache[key].agebit = lifeTimes.begin();
                cache[key].value = value;
                cache.erase(lifeTimes.back());
                lifeTimes.pop_back();
            }
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */