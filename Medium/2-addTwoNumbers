// 2. Add Two Numbers
// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
// You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *ans = new ListNode();
        ListNode *current = ans;
        
        while(l1 != nullptr || l2 != nullptr)
        {
            if(l1 != nullptr)
            {
                current->val += l1->val;
                l1 = l1->next;
            }
            
            if(l2 != nullptr)
            {
                current->val += l2->val;
                l2 = l2->next;
            }
             
            if(l1 != nullptr || l2 != nullptr)
            {
                ListNode *newNode = new ListNode();
                current->next = newNode;
            }

            current = current->next;
        }
        
        
        current = ans;
        while(current != nullptr)
        {
            if(current->val > 9)
            {
                current->val -= 10;
                if(current->next == nullptr)
                {
                    ListNode *newNode = new ListNode();
                    current->next = newNode;
                }
                current->next->val += 1;

            }
            current = current->next;
        }
        return ans;
    }
};