// 676. Implement Magic Dictionary
// Design a data structure that is initialized with a list of different words. Provided a string, you should determine 
// if you can change exactly one character in this string to match any word in the data structure.
// Implement the MagicDictionary class:
// MagicDictionary() Initializes the object.
// void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
// bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match 
// any string in the data structure, otherwise returns false.

class MagicDictionary {
private:
    struct TrieNode {
        TrieNode* children[26];
        bool complete;
        TrieNode() {
            for(int i = 0; i < 26; ++i) 
                children[i] = nullptr;
            complete = false;
        }
    };

    TrieNode* head;

public:
    MagicDictionary() {
        head = new TrieNode();
    }
    
    void buildDict(vector<string> dictionary) {
        for(auto word : dictionary) {
            TrieNode* current = head;
            for(auto ch : word) {
                if(!current->children[ch-'a'])
                    current->children[ch-'a'] = new TrieNode();
                current = current->children[ch-'a'];
            }
            current->complete = true;
        }
    }
    
    bool search(string searchWord) {
        return searchHelper(searchWord, head, 0, false);
    }

    bool searchHelper(string& searchWord, TrieNode* current, int i, bool replaced) {
        if(i >= searchWord.length())
            return current->complete && replaced;
        
        bool res = false;
        for(int j = 0; j < 26; ++j) {
            if(!current->children[j])
                continue;
            
            if(j == searchWord[i]-'a')
                res = searchHelper(searchWord, current->children[j], i+1, replaced);
            else if(!replaced)
                res = searchHelper(searchWord, current->children[j], i+1, true);

            if(res)
                return true;
        }
        return false;
    }
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */