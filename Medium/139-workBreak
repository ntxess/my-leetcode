// 139. Word Break
// Given a string s and a dictionary of strings wordDict, return true if s can be segmented into 
// a space-separated sequence of one or more dictionary words.
// Note that the same word in the dictionary may be reused multiple times in the segmentation.

class Solution {
public:
    struct TrieNode {
        TrieNode* letters[26];
        bool complete = false;
        TrieNode() {
            for(int i = 0; i < 26; ++i) {
                letters[i] = nullptr;
            }
        }
    };

    TrieNode* head;

    bool wordBreak(string s, vector<string>& wordDict) {
        head = new TrieNode();
        for(auto word : wordDict)
            insert(word);

        vector<bool> dp(s.size()+1, false);
        dp[0]=true;
        
        for(int i = 1; i <= s.size(); ++i){
            for(int j=0; j < i; ++j){
                if(dp[j] && search(s.substr(j, i-j)))
                    dp[i]=true;
            }
        }
        return dp[s.size()];
    }

    void insert(string& word) {
        TrieNode* current = head;
        for(auto ch : word) {
            if(!current->letters[ch-'a']) {
                TrieNode* newNode = new TrieNode();
                current->letters[ch-'a'] = newNode;
            }
            current = current->letters[ch-'a'];
        }
        current->complete = true;
    }

    bool search(string word) {
        TrieNode* current = head;
        for(auto ch : word) {
            if(!current->letters[ch-'a'])
                return false;
            current = current->letters[ch-'a'];
        }
        return current->complete;
    }
};
