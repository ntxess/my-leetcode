// 230. Kth Smallest Element in a BST
// Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        priority_queue<int> pq;
        helper(root, k, pq);
        return pq.top();
    }

    void helper(TreeNode* root, int k, priority_queue<int>& pq) {
        if(!root)
            return;

        if(pq.size() < k)
            pq.push(root->val);
        else if(root->val < pq.top()){
            pq.pop();
            pq.push(root->val);
        }
        
        helper(root->left, k, pq);
        helper(root->right, k, pq);
    }
};
