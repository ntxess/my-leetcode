// 1721. Swapping Nodes in a Linked List
// You are given the head of a linked list, and an integer k.
// Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).
// **Note** interview question given

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode* slow = head;
        ListNode* fast = head;

        int j = 0;
        while(j++ < k-1) {
            slow = slow->next;
            fast = fast->next;
        }

        ListNode* temp = head;
        while(fast->next) {
            temp = temp->next;
            fast = fast->next;
        }
        swap(slow->val, temp->val);
        return head;
    }
};