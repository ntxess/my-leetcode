// 40. Combination Sum II
// Given a collection of candidate numbers (candidates) and a target number (target), 
// find all unique combinations in candidates where the candidate numbers sum to target.
// Each number in candidates may only be used once in the combination.
// Note: The solution set must not contain duplicate combinations.

class Solution {
private:
    vector<vector<int>> ans;
    vector<int> current;

public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        helper(candidates, target, 0, 0);
        return ans;
    }

    void helper(vector<int>& candidates, int target, int idx, int currSum) {
        if(currSum >= target) {
            if(currSum == target)
                ans.push_back(current);
            return;
        }

        for(int i = idx; i < candidates.size(); ++i) {
            if(i != idx && candidates[i] == candidates[i-1])
                continue;

            currSum += candidates[i];
            current.push_back(candidates[i]);
            helper(candidates, target, i+1, currSum);
            currSum -= candidates[i];
            current.pop_back();
        }
    }
};