// 39. Combination Sum
// Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
// The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
// frequency
//  of at least one of the chosen numbers is different.
// The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

class Solution {
private:
    vector<vector<int>> ans;
    vector<int> current;

public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        combinationHelper(candidates, target, 0, 0);
        return ans;
    }

    void combinationHelper(vector<int>& candidates, int target, int currSum, int idx) {
        if(currSum >= target) {
            if(currSum == target)
                ans.push_back(current);
            return;
        }

        for(int i = idx; i < candidates.size(); ++i) {
            currSum += candidates[i];
            current.push_back(candidates[i]);
            combinationHelper(candidates, target, currSum, i);
            currSum -= candidates[i];
            current.pop_back();
        }
    } 
};