// 17. Letter Combinations of a Phone Number
// Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
// A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

class Solution {
private:
    unordered_map<int, string> map = {
        {2, "abc"},
        {3, "def"},
        {4, "ghi"},
        {5, "jkl"},
        {6, "mno"},
        {7, "pqrs"},
        {8, "tuv"},
        {9, "wxyz"},
    };

public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty())
            return vector<string>();

        vector<string> ans;
        string current;
        helper(digits, 0, current, ans);
        return ans;
    }

    void helper(string& digits, int idx, string& current, vector<string>& ans) {
        if(current.length() == digits.size()) {
            ans.push_back(current);
            return;
        }

        string letters = map[digits[idx]-'0'];
        for(int i = 0; i < letters.length(); ++i) {
            current.push_back(letters[i]);
            helper(digits, idx+1, current, ans);
            current.pop_back();
        }
    }
};