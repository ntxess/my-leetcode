// 622. Design Circular Queue
// Design your implementation of the circular queue. The circular queue is a linear data structure in which the 
// operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".
// One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal
//  queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.
// Implement the MyCircularQueue class:
// MyCircularQueue(k) Initializes the object with the size of the queue to be k.
// int Front() Gets the front item from the queue. If the queue is empty, return -1.
// int Rear() Gets the last item from the queue. If the queue is empty, return -1.
// boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
// boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
// boolean isEmpty() Checks whether the circular queue is empty or not.
// boolean isFull() Checks whether the circular queue is full or not.
// You must solve the problem without using the built-in queue data structure in your programming language. 

class MyCircularQueue {
private:
    vector<int> queue;
    int front;
    int rear;
public:
    MyCircularQueue(int k) : front(-1), rear(-1) {
        queue = vector<int>(k);
    }
    
    bool enQueue(int value) {
        if(isFull())
            return false;

        if(isEmpty())
            front = rear = 0;
        else
            rear = (rear + 1) % queue.size();
        queue[rear] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty())
            return false;
        
        if(front == rear)
            front = rear = -1;
        else
            front = (front + 1) % queue.size();
        return true;
    }
    
    int Front() {
        if(isEmpty())
            return -1;
        return queue[front];
    }
    
    int Rear() {
        if(isEmpty())
            return -1;
        return queue[rear];
    }
    
    bool isEmpty() {
        if(front == -1 && rear == -1)
            return true;
        return false;
    }
    
    bool isFull() {
        if(((rear + 1) % queue.size()) == front)
            return true;
        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */