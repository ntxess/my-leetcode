// 424. Longest Repeating Character Replacement
// You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. 
// You can perform this operation at most k times.
// Return the length of the longest substring containing the same letter you can get after performing the above operations.

class Solution {
public:
    int characterReplacement(string s, int k) {
        unordered_map<char, int> map;
        int maxRepeat = 0;
        int ans = 0;

        int left = 0;
        for(int right = 0; right < s.length(); right++) {

            maxRepeat = max(maxRepeat, ++map[s[right]]);
            if(((right - left + 1) - maxRepeat) <= k) {
                ans = max(ans, right - left + 1);
            } else {
                map[s[left]]--;
                left++;
            }
        }
        return ans;
    }
};