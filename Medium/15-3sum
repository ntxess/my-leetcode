// 15. 3Sum
// Given an integer array nums, return all the triplets [nums[i], nums[j], 
// nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        vector<vector<int>> ans;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > 0)
                break;
            
            if(i > 0 && nums[i] == nums[i-1])
                continue;

            int left = i+1;
            int right = nums.size()-1;

            while(left < right) {
                int threeSum = nums[i] + nums[left] + nums[right];

                if(threeSum < 0) {
                    left++;
                } else if(threeSum > 0) {
                    right--;
                } else {
                    ans.push_back({nums[i], nums[left], nums[right]});

                    while(left < right && nums[left] == nums[left+1])
                        left++;
                    left++;

                    while(left < right && nums[right] == nums[right-1])
                        right--;
                    right--;
                }
            }
        }
        return ans;
    }
};