// 1796. Second Largest Digit in a String
// Given an alphanumeric string s, return the second largest numerical digit that appears 
// in s, or -1 if it does not exist.
// An alphanumeric string is a string consisting of lowercase English letters and digits.

// First version O(n * nlogn)
class Solution {
public:
    int secondHighest(string s) {
        vector<int> numbers;
        for(int i = 0; i < s.length(); i++) {
            if(isdigit(s[i]) && find(numbers.begin(), numbers.end(), s[i] - '0') == numbers.end())
                numbers.push_back(s[i] - '0');
        }

        if(numbers.size() <= 1)
            return -1;

        sort(numbers.begin(), numbers.end());
        return numbers[numbers.size() - 2];
    }
};

// Second version O(n)
class Solution {
public:
    int secondHighest(string s) {
        int ans[2] = {-1, -1};

        for(int i = 0; i < s.length(); i++) {
            if(isdigit(s[i])) {
                if(s[i] - '0' > ans[0]) {
                    ans[1] = ans[0];
                    ans[0] = s[i] - '0';
                } else if(s[0] != s[i] - '0' && s[i] - '0' > s[1]) {
                    ans[1] = s[i] - '0';
                }
            }
        }
        return ans[1];
    }
};