// 1880. Check if Word Equals Summation of Two Words
// The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).
// The numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, 
// which is then converted into an integer.
// For example, if s = "acb", we concatenate each letter's letter value, resulting in "021". After converting it, we get 21.
// You are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' 
// inclusive.
// Return true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, 
// or false otherwise.


class Solution {
    public:
        
        int getNum(string word) {
            int sum = 0;
            for(int i = word.length() - 1; i >= 0; i--) {
                sum += (int(word[i]) - 97) * pow(10, word.length() - 1 - i);
            }
            return sum;
        }
        
        bool isSumEqual(string firstWord, string secondWord, string targetWord) {
    
            int first = getNum(firstWord);
            int second = getNum(secondWord);
            int target = getNum(targetWord);
    
            if ((first + second) == target) {
                return true;
            }
            return false;
        }
    };