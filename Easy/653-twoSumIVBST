// 653. Two Sum IV - Input is a BST
// Given the root of a binary search tree and an integer k, return true 
// if there exist two elements in the BST such that their sum is equal to k, or false otherwise.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> set;
        return treeMapping(root, k, set);;
    }

    bool treeMapping(TreeNode* root, int k, unordered_set<int>& set) {
        if(!root)
            return false;
        
        if(set.count(k - root->val))
            return true;

        set.insert(root->val);
        
        if(treeMapping(root->left, k, set))
            return true;

        if(treeMapping(root->right, k, set))
            return true;

        return false;
    }
};