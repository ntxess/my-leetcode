// 892. Surface Area of 3D Shapes
// You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value 
// v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).
// After placing these cubes, you have decided to glue any directly adjacent cubes to each other, 
// forming several irregular 3D shapes.
// Return the total surface area of the resulting shapes.
// Note: The bottom face of each shape counts toward its surface area.

class Solution {
public:
    int surfaceArea(vector<vector<int>>& grid) {
        int surfaceArea = 0;
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[i].size(); j++) {
                if(grid[i][j] == 0)
                    continue;

                int area = (4 * grid[i][j]) + 2;

                if(i-1 >= 0 && grid[i][j] != 0) {
                    area -= grid[i][j];
                    if(grid[i][j] > grid[i-1][j])
                        area += abs(grid[i][j] - grid[i-1][j]);
                }

                if(j-1 >= 0 && grid[i][j] != 0) {
                    area -= grid[i][j];
                    if(grid[i][j] > grid[i][j-1])
                        area += abs(grid[i][j] - grid[i][j-1]);
                }

                if(i+1 < grid.size() && grid[i][j] != 0) {
                    area -= grid[i][j];
                    if(grid[i][j] > grid[i+1][j])
                        area += abs(grid[i][j] - grid[i+1][j]);
                }

                if(j+1 < grid[i].size() && grid[i][j] != 0) {
                    area -= grid[i][j];
                    if(grid[i][j] > grid[i][j+1])
                        area += abs(grid[i][j] - grid[i][j+1]);
                }
                
                surfaceArea += area;
            }
        }
        return surfaceArea;
    }
};