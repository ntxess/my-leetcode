// 2409. Count Days Spent Together
// Alice and Bob are traveling to Rome for separate business meetings.
// You are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the 
// dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to leaveBob 
// (inclusive). Each will be a 5-character string in the format "MM-DD", corresponding to the month and day of the date.
// Return the total number of days that Alice and Bob are in Rome together.
// You can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of 
// days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].

class Solution {
public:
    int countDaysTogether(string arriveAlice, string leaveAlice, string arriveBob, string leaveBob) {
        vector<int> months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        int aliceStart = stoi(arriveAlice.substr(3,4));
        int aliceEnd = stoi(leaveAlice.substr(3,4));
        int bobStart = stoi(arriveBob.substr(3,4));
        int bobEnd = stoi(leaveBob.substr(3,4));

        int aliceSMonth = stoi(arriveAlice.substr(0,2))-1;
        for(int i = 0; i < aliceSMonth; i++)
            aliceStart += months[i];
        
        int aliceLMonth = stoi(leaveAlice.substr(0,2))-1;
        for(int i = 0; i < aliceLMonth; i++)
            aliceEnd += months[i];

        int bobSMonth = stoi(arriveBob.substr(0,2))-1;
        for(int i = 0; i < bobSMonth; i++)
            bobStart += months[i];
        
        int bobLMonth = stoi(leaveBob.substr(0,2))-1;
        for(int i = 0; i < bobLMonth; i++)
            bobEnd += months[i];
        
        if(aliceEnd < bobStart || bobEnd< aliceStart)
            return 0;
            
        return (int)((min(aliceEnd, bobEnd) - max(aliceStart, bobStart)) + 1);     
    }
};