// 661. Image Smoother
// An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down 
// the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). 
// If one or more of the surrounding cells of a cell is not 
// present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).

class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        vector<vector<int>> ans;
        for(int i = 0; i < img.size(); i++) {
            vector<int> row;
            for(int j = 0; j < img[i].size(); j++) {
                int sum = img[i][j];
                int checks = 1;

                // top left
                if(i-1 >= 0 && j-1 >= 0) {
                    sum += img[i-1][j-1];
                    checks++;
                }

                // top middle
                if(i-1 >= 0) {
                    sum += img[i-1][j];
                    checks++;
                }

                // top right
                if(i-1 >= 0 && j+1 < img[i].size()) {
                    sum += img[i-1][j+1];
                    checks++;
                }

                // mid left
                if(j-1 >= 0) {
                    sum += img[i][j-1];
                    checks++;
                }

                // mid right
                if(j+1 < img[i].size()) {
                    sum += img[i][j+1];
                    checks++;
                }

                // bot left
                if(i+1 < img.size() && j-1 >= 0) {
                    sum += img[i+1][j-1];
                    checks++;
                }

                // bot middle
                if(i+1 < img.size()) {
                    sum += img[i+1][j];
                    checks++;
                }

                // bot right
                if(i+1 < img.size() && j+1 < img[i].size()) {
                    sum += img[i+1][j+1];
                    checks++;
                }
                row.push_back(floor(sum / checks));
            }
            ans.push_back(row);
        }
        return ans;
    }
};