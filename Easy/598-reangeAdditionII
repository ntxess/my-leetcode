// 598. Range Addition II
// You are given an m x n matrix M initialized with all 0's and an array of operations ops, 
// where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.
// Count and return the number of maximum integers in the matrix after performing all the operations.

class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        if(ops.size() == 0)
            return m * n;

        int minX = INT_MAX;
        int minY = INT_MAX;
        for(int i = 0; i < ops.size(); i++) {
            minX = min(minX, ops[i][0]);
            minY = min(minY, ops[i][1]);
        }
        return minX * minY;
    }
};