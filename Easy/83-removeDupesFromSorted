// 83. Remove Duplicates from Sorted List
// Given the head of a sorted linked list, delete all 
// duplicates such that each element appears only once. Return the linked list sorted as well.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head || !head->next)
            return head;

        ListNode* behind = head;
        ListNode* ahead = head->next;

        while(behind != nullptr) {
            if(ahead == nullptr)
                break;

            if(behind->val == ahead->val) {
                ListNode* temp = ahead;
                ahead = ahead->next;
                behind->next = ahead;
                delete temp;
            } else {
                behind = behind->next;
                ahead = ahead->next;
            }
        }

        return head;
    }
};