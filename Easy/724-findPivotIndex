// 724. Find Pivot Index
// Given an array of integers nums, calculate the pivot index of this array.
// The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the 
// sum of all the numbers strictly to the index's right.
// If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. 
// This also applies to the right edge of the array.
// Return the leftmost pivot index. If no such index exists, return -1.

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        if(nums.size() == 1)
            return 0;
        
        int lSum = 0;
        int rSum = 0;
        for(int i = 1; i < nums.size(); i++){
            rSum += nums[i];
        }
        
        for(int i = 0; i+1 < nums.size(); i++) {
            if(lSum == rSum)
                return i;

            lSum += nums[i];
            rSum -= nums[i+1];
        }

        if(lSum == rSum)
            return nums.size()-1;

        return -1;
    }
};

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int lSum = 0;
        int rSum = 0;
        for(auto i : nums)
            rSum += i;

        for(int i = 0; i < nums.size(); i++) {
            rSum -= nums[i];

            if(lSum == rSum)
                return i;
            
            lSum += nums[i];
        }
        return -1;
    }
};