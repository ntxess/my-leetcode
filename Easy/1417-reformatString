// 1417. Reformat The String
// You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).
// You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.
// Return the reformatted string or return an empty string if it is impossible to reformat the string.

class Solution {
public:
    string reformat(string s) {
        if(s.size() == 1)
            return s;
            
        vector<char> letters;
        vector<char> numbers;

        for(auto ch : s) {
            if(isalpha(ch)) {
                letters.push_back(ch);
            } else {
                numbers.push_back(ch);
            }
        }

        if(!letters.size() || !numbers.size() || abs(int(letters.size() - numbers.size())) > 1)
            return "";

        string ans = "";
        int size = min(int(letters.size()), int(numbers.size()));

        for(int i = 0; i < size; i++) {
            if(letters.size() > numbers.size()) {
                ans.push_back(letters[i]);
                ans.push_back(numbers[i]);
            } else {
                ans.push_back(numbers[i]);
                ans.push_back(letters[i]);
            }
        }

        if(letters.size() > numbers.size())
            ans.push_back(letters[letters.size()-1]);
        else if(letters.size() < numbers.size())
            ans.push_back(numbers[numbers.size()-1]);
        return ans;
    }
};