// 1013. Partition Array Into Three Parts With Equal Sum
// Given an array of integers arr, return true if we can partition the array into three non-empty 
// parts with equal sums.
// Formally, we can partition the array if we can find indexes i + 1 < j with 
// (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        int sum = 0;

        for(auto i : arr) {
            sum += i;
        }
        
        if(sum % 3 != 0) {
            return false;
        }
        
        int target = sum / 3;
        int found = 0;
        int currTarget = 0;
        for(int i = 0; i < arr.size(); i++) {
            currTarget += arr[i];
            if(currTarget == target) {
                found++;
                currTarget = 0;
            }
        }
        return found >= 3;
    }
};