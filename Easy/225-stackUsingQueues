// 225. Implement Stack using Queues
// Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

// Implement the MyStack class:

// void push(int x) Pushes element x to the top of the stack.
// int pop() Removes the element on the top of the stack and returns it.
// int top() Returns the element on the top of the stack.
// boolean empty() Returns true if the stack is empty, false otherwise.
// Notes:

// You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
// Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.

class MyStack {
private:
    queue<int> q1;
    queue<int> q2;

public:
    MyStack() {}
    
    void push(int x) {
        q1.push(x);
    }
    
    int pop() {
        int size = q1.size() - 1;
        for(int i = 0; i < size; i++) {
            q2.push(q1.front());
            q1.pop();
        }

        int rVal = q1.front();
        q1.pop();
        q2.swap(q1);
        return rVal;
    }
    
    int top() {
        int size = q1.size() - 1;
        for(int i = 0; i < size; i++) {
            q2.push(q1.front());
            q1.pop();
        }
        
        int rVal = q1.front();
        q1.pop();
        q2.swap(q1);
        q1.push(rVal);
        return rVal;
    }
    
    bool empty() {
        return q1.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */