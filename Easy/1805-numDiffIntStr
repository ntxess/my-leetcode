// 1805. Number of Different Integers in a String
// You are given a string word that consists of digits and lowercase English letters.
// You will replace every non-digit character with a space. For example, "a123bc34d8ef34" will become " 123  34 8  34". Notice that you are left with some integers that are separated by at least one space: "123", "34", "8", and "34".
// Return the number of different integers after performing the replacement operations on word.
// Two integers are considered different if their decimal representations without any leading zeros are different.

class Solution {
public:
    int numDifferentIntegers(string word) {
        int count = 0;
        set<string> num;
        string block;
        for(int i = 0; i < word.size(); ++i) {
            if(!isdigit(word[i]))
                continue; 

            while(isdigit(word[i]))
                block.push_back(word[i++]);

            stripZero(block);

            if(num.find(block) == num.end())
                ++count;

            num.insert(block);
            block.erase();
        }   
        return count;
    }

    void stripZero(string& block) {
        int j = 0;
        while(j < block.length() && block[j] == '0')
            ++j;

        block = block.substr(j);
    }
};

class Solution {
public:
    int numDifferentIntegers(string word) {
        unordered_map<string, int> map;
        for(int i = 0; i < word.size(); ++i) {
            if(!isdigit(word[i]))
                continue; 

            string block;
            while(isdigit(word[i]))
                block.push_back(word[i++]);

            stripZero(block);

            ++map[block];
        }   
        return map.size();
    }

    void stripZero(string& block) {
        int j = 0;
        while(j < block.length() && block[j] == '0')
            ++j;

        block = block.substr(j);
    }
};