// 942. DI String Match
// A permutation perm of n + 1 integers of all the integers in the range [0, n] 
// can be represented as a string s of length n where:
// s[i] == 'I' if perm[i] < perm[i + 1], and
// s[i] == 'D' if perm[i] > perm[i + 1].
// Given a string s, reconstruct the permutation perm and return it. If there are
//  multiple valid permutations perm, return any of them.

class Solution {
public:
    vector<int> diStringMatch(string s) {
        vector<int> ans;
        int increase = 0;
        int decrease = 0;
        for(int i = 0; i <= s.length(); i++) {
            if(s[i] == 'I') {
                ans.push_back(increase++);
            } else {
                ans.push_back(s.length() - decrease++);
            }
        }
        return ans;
    }
};