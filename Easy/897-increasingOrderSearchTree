// 897. Increasing Order Search Tree
// Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost 
// node in the tree is now the root of the tree, and every node has no left child and only one right child.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> allNodes;
        traverseBST(root, allNodes);
        sort(allNodes.begin(), allNodes.end());

        TreeNode* head = new TreeNode(allNodes[0]);
        TreeNode* traveler = head;
        for(int i = 1; i < allNodes.size(); i++) {
            TreeNode* newNode = new TreeNode(allNodes[i]);
            traveler->right = newNode;
            traveler = traveler->right;
        }
        return head;
    }

    void traverseBST(TreeNode* root, vector<int>& allNodes) {
        if(!root)
            return;

        allNodes.push_back(root->val);
        traverseBST(root->left, allNodes);
        traverseBST(root->right, allNodes);
        return;
    }
};