// 530. Minimum Absolute Difference in BST
// Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values 
// of any two different nodes in the tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        vector<int> values;
        getMinHelper(root, values);
        sort(values.begin(), values.end());

        int minimum = INT_MAX;
        for(int i = 0; i+1 < values.size(); i++) 
            minimum = min(minimum, abs(values[i] - values[i+1]));
        return minimum;
    }

    void getMinHelper(TreeNode* root, vector<int>& values) {
        if(!root)
            return;
        
        values.push_back(root->val);
        getMinHelper(root->left, values);
        getMinHelper(root->right, values);
    }
};