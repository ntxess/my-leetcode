// 1603. Design Parking System
// Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, 
// medium, and small, with a fixed number of slots for each size.
// Implement the ParkingSystem class:
//ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem 
// class. The number of slots for each parking space are given as part of the constructor.
// bool addCar(int carType) Checks whether there is a parking space of carType for the car 
// that wants to get into the parking lot. carType can be of three kinds: big, medium, or small,
// which are represented by 1, 2, and 3 respectively. A car can only park in a parking space of its carType. 
// If there is no space available, return false, else park the car in that size space and return true.

class ParkingSystem {
public:
    
    int _parkingSpace[3];
    
    ParkingSystem(int big, int medium, int small) {
        this->_parkingSpace[0] = big;
        this->_parkingSpace[1] = medium;
        this->_parkingSpace[2] = small;
    }
    
    bool addCar(int carType) {
        if(_parkingSpace[carType-1] != 0) {
            _parkingSpace[carType-1]--;
            return true;
        }
        return false;
    }
};

/**
 * Your ParkingSystem object will be instantiated and called as such:
 * ParkingSystem* obj = new ParkingSystem(big, medium, small);
 * bool param_1 = obj->addCar(carType);
 */