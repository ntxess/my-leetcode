// 501. Find Mode in Binary Search Tree
// Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., 
// the most frequently occurred element) in it.
// If the tree has more than one mode, return them in any order.
// Assume a BST is defined as follows:
// The left subtree of a node contains only nodes with keys less than or equal to the node's key.
// The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
// Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        unordered_map<int, int> mode;
        int maxOccurance = 0;
        findModeHelper(root, mode, maxOccurance);
        
        vector<int> ans;
        for(auto i : mode) {
            if(i.second == maxOccurance)
                ans.push_back(i.first);
        }
        return ans;
    }

    void findModeHelper(TreeNode* root, unordered_map<int, int>& mode, int& maxOccurance) {
        if(!root)
            return;
        
        mode[root->val]++;
        maxOccurance = max(maxOccurance, mode[root->val]);
        findModeHelper(root->left, mode, maxOccurance);
        findModeHelper(root->right, mode, maxOccurance);
    }
};