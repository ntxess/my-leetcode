// 938. Range Sum of BST
// Given the root node of a binary search tree and two integers low and high, return the sum of
// values of all nodes with a value in the inclusive range [low, high].

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root == nullptr) 
            return 0;

        int leftSum = rangeSumBST(root->left, low, high);
        int rightSum = rangeSumBST(root->right, low, high);

        if(root->val >= low && root->val <= high)
            return root->val + leftSum + rightSum;
        return leftSum + rightSum;
    }
};

// OR With helper

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        int sum = 0;
        rangeSumHelper(root, low, high, sum);
        return sum;
    }

    void rangeSumHelper(TreeNode* root, int low, int high, int& runningSum) {
        if(root == nullptr) 
            return;

        rangeSumHelper(root->left, low, high, runningSum);
        rangeSumHelper(root->right, low, high, runningSum);

        if(root->val >= low && root->val <= high)
            runningSum += root->val;
    }
};