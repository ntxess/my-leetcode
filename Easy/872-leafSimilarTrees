// 872. Leaf-Similar Trees
// Consider all the leaves of a binary tree, from left to right order,
// the values of those leaves form a leaf value sequence.
// Two binary trees are considered leaf-similar if their leaf value sequence is the same.
// Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> leaves1;
        vector<int> leaves2;

        traverseTree(root1, leaves1);
        traverseTree(root2, leaves2);

        if(leaves1.size() != leaves2.size())
            return false;
        
        for (int i = 0; i < leaves1.size(); i++) {
            if(leaves1[i] != leaves2[i]) {
                return false;
            }
        }
        return true;
    }

    void traverseTree(TreeNode* root, vector<int>& leaves) {
        if(root == nullptr) 
            return;

        traverseTree(root->left, leaves);
        traverseTree(root->right, leaves);

        if(root->left == nullptr && root->right == nullptr) {
            leaves.push_back(root->val);
        }
        return;
    }
};